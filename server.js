const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
  robots: {
    blue1: { connected: false, player: null, battery: 87, lastSeen: 0, lastCommand: null, ip: null },
    blue2: { connected: false, player: null, battery: 91, lastSeen: 0, lastCommand: null, ip: null },
    red1: { connected: false, player: null, battery: 83, lastSeen: 0, lastCommand: null, ip: null },
    red2: { connected: false, player: null, battery: 95, lastSeen: 0, lastCommand: null, ip: null }
  },
  players: new Map(),
  viewers: 0,
  score: { blue: 0, red: 0 },
  // –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–±–æ—Ç–∞
  commandQueues: {
    blue1: [],
    blue2: [],
    red1: [],
    red2: []
  }
};

// –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));
app.use(express.json());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ===========================================
// API –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –†–û–ë–û–¢–û–í
// ===========================================

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞
app.post('/api/robot/register', (req, res) => {
  const { robotId, battery, version, ip } = req.body;
  
  if (!gameState.robots[robotId]) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–±–æ—Ç–∞' });
  }
  
  gameState.robots[robotId].connected = true;
  gameState.robots[robotId].battery = battery || 85;
  gameState.robots[robotId].lastSeen = Date.now();
  gameState.robots[robotId].ip = ip;
  
  console.log(`ü§ñ –†–æ–±–æ—Ç ${robotId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (IP: ${ip})`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  io.emit('robotConnected', { robotId, timestamp: Date.now() });
  
  res.json({ 
    status: 'registered', 
    robotId, 
    server_time: Date.now(),
    commands_endpoint: `/api/robot/commands/${robotId}`
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∞
app.get('/api/robot/commands/:robotId', (req, res) => {
  const robotId = req.params.robotId;
  
  if (!gameState.robots[robotId]) {
    return res.status(404).json({ error: '–†–æ–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  gameState.robots[robotId].lastSeen = Date.now();
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  const commands = gameState.commandQueues[robotId];
  
  if (commands.length > 0) {
    const command = commands.shift(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É
    gameState.robots[robotId].lastCommand = command;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ${command.command} —Ä–æ–±–æ—Ç—É ${robotId}`);
    
    res.json(command);
  } else {
    // –ù–µ—Ç –∫–æ–º–∞–Ω–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content
    res.status(204).send();
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ—Ç —Ä–æ–±–æ—Ç–∞
app.post('/api/robot/telemetry', (req, res) => {
  const { robotId, batteryLevel, wifiStrength, uptime, freeHeap, currentCommand } = req.body;
  
  if (!gameState.robots[robotId]) {
    return res.status(404).json({ error: '–†–æ–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç–∞
  gameState.robots[robotId].battery = batteryLevel;
  gameState.robots[robotId].lastSeen = Date.now();
  
  console.log(`üìä –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç ${robotId}: –±–∞—Ç–∞—Ä–µ—è ${batteryLevel}%, wifi ${wifiStrength}dBm`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º
  io.emit('robotTelemetry', {
    robotId,
    battery: batteryLevel,
    wifiStrength,
    uptime,
    freeHeap,
    timestamp: Date.now()
  });
  
  res.json({ status: 'received' });
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
app.post('/api/robot/ack', (req, res) => {
  const { robotId, command, timestamp, status } = req.body;
  
  console.log(`‚úÖ –†–æ–±–æ—Ç ${robotId} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: ${command}`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
  io.emit('commandExecuted', {
    robotId,
    command,
    status,
    timestamp: Date.now()
  });
  
  res.json({ status: 'acknowledged' });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤
app.get('/api/robots/status', (req, res) => {
  const robotsStatus = {};
  
  Object.keys(gameState.robots).forEach(robotId => {
    const robot = gameState.robots[robotId];
    robotsStatus[robotId] = {
      connected: robot.connected,
      battery: robot.battery,
      lastSeen: robot.lastSeen,
      hasPlayer: !!robot.player,
      lastCommand: robot.lastCommand,
      queueLength: gameState.commandQueues[robotId].length
    };
  });
  
  res.json({
    robots: robotsStatus,
    gameState: {
      score: gameState.score,
      playersCount: gameState.players.size,
      viewers: gameState.viewers
    },
    timestamp: Date.now()
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å —Ä–æ–±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
app.post('/api/robot/command', (req, res) => {
  const { robotId, command, speed = 200, playerId } = req.body;
  
  if (!gameState.robots[robotId]) {
    return res.status(404).json({ error: '–†–æ–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  if (!gameState.robots[robotId].connected) {
    return res.status(503).json({ error: '–†–æ–±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' });
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
  const commandObj = {
    command,
    speed,
    timestamp: Date.now(),
    playerId
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
  gameState.commandQueues[robotId].push(commandObj);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
  if (gameState.commandQueues[robotId].length > 10) {
    gameState.commandQueues[robotId].shift();
  }
  
  console.log(`üéÆ –ö–æ–º–∞–Ω–¥–∞ ${command} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–æ–±–æ—Ç–∞ ${robotId}`);
  
  res.json({ 
    status: 'queued', 
    queueLength: gameState.commandQueues[robotId].length,
    command: commandObj
  });
});

// ===========================================
// WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–Ø (–¥–ª—è –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤)
// ===========================================

io.on('connection', (socket) => {
  console.log('üîå –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', socket.id);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  socket.emit('gameState', getPublicGameState());
  
  // –í—ã–±–æ—Ä —Ä–æ–±–æ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
  socket.on('selectRobot', (data) => {
    handleRobotSelection(socket, data);
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ —Ä–æ–±–æ—Ç—É –æ—Ç –∏–≥—Ä–æ–∫–∞
  socket.on('robotCommand', (data) => {
    handleRobotCommandFromPlayer(socket, data);
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
  socket.on('playerJoin', (data) => {
    const playerName = data.playerName || `–ò–≥—Ä–æ–∫${Math.floor(Math.random() * 1000)}`;
    
    gameState.players.set(socket.id, {
      name: playerName,
      robotId: null,
      joinTime: Date.now(),
      commandsSent: 0
    });
    
    socket.emit('playerRegistered', { 
      playerId: socket.id, 
      playerName: playerName 
    });
    
    console.log(`üë§ –ò–≥—Ä–æ–∫ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`);
  });
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    handlePlayerDisconnection(socket);
  });
});

function handleRobotSelection(socket, data) {
  const robotId = data.robotId;
  const robot = gameState.robots[robotId];
  
  if (!robot) {
    socket.emit('error', { message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–±–æ—Ç–∞' });
    return;
  }
  
  if (!robot.connected) {
    socket.emit('error', { message: '–†–æ–±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' });
    return;
  }
  
  if (robot.player && robot.player !== socket.id) {
    socket.emit('error', { message: '–†–æ–±–æ—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º' });
    return;
  }
  
  const player = gameState.players.get(socket.id);
  if (!player) {
    socket.emit('error', { message: '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –∏–≥—Ä–æ–∫' });
    return;
  }
  
  // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–æ–±–æ—Ç
  if (player.robotId) {
    const prevRobot = gameState.robots[player.robotId];
    if (prevRobot) {
      prevRobot.player = null;
    }
  }
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
  robot.player = socket.id;
  player.robotId = robotId;
  
  console.log(`üéØ ${player.name} –≤—ã–±—Ä–∞–ª —Ä–æ–±–æ—Ç–∞ ${robotId}`);
  
  socket.emit('robotSelected', { robotId, success: true });
  io.emit('gameState', getPublicGameState());
}

function handleRobotCommandFromPlayer(socket, data) {
  const player = gameState.players.get(socket.id);
  
  if (!player || !player.robotId) {
    socket.emit('error', { message: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–±–æ—Ç–∞' });
    return;
  }
  
  const robot = gameState.robots[player.robotId];
  if (!robot || !robot.connected) {
    socket.emit('error', { message: '–†–æ–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
    return;
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∫–æ–º–∞–Ω–¥
  const now = Date.now();
  if (player.lastCommand && now - player.lastCommand < 50) {
    return;
  }
  player.lastCommand = now;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å —Ä–æ–±–æ—Ç–∞
  const commandObj = {
    command: data.command,
    speed: data.speed || 200,
    timestamp: now,
    playerId: socket.id
  };
  
  gameState.commandQueues[player.robotId].push(commandObj);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
  if (gameState.commandQueues[player.robotId].length > 5) {
    gameState.commandQueues[player.robotId].shift();
  }
  
  player.commandsSent++;
  
  console.log(`üéÆ ${data.command} ‚Üí ${player.robotId} (${player.name})`);
  
  socket.emit('commandQueued', {
    command: data.command,
    robotId: player.robotId,
    queueLength: gameState.commandQueues[player.robotId].length,
    timestamp: now
  });
}

function handlePlayerDisconnection(socket) {
  const player = gameState.players.get(socket.id);
  
  if (player) {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–æ–±–æ—Ç–∞
    if (player.robotId) {
      const robot = gameState.robots[player.robotId];
      if (robot) {
        robot.player = null;
      }
    }
    
    gameState.players.delete(socket.id);
    console.log(`üë§‚ùå –ò–≥—Ä–æ–∫ ${player.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
  }
  
  io.emit('gameState', getPublicGameState());
}

function getPublicGameState() {
  const publicRobots = {};
  
  Object.keys(gameState.robots).forEach(robotId => {
    const robot = gameState.robots[robotId];
    publicRobots[robotId] = {
      connected: robot.connected,
      hasPlayer: !!robot.player,
      battery: robot.battery,
      lastSeen: robot.lastSeen,
      lastCommand: robot.lastCommand
    };
  });
  
  return {
    robots: publicRobots,
    playersCount: gameState.players.size,
    viewersCount: gameState.viewers,
    score: gameState.score,
    timestamp: Date.now()
  };
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤
setInterval(() => {
  const now = Date.now();
  const timeoutThreshold = 60000; // 1 –º–∏–Ω—É—Ç–∞
  
  Object.keys(gameState.robots).forEach(robotId => {
    const robot = gameState.robots[robotId];
    if (robot.connected && robot.lastSeen && now - robot.lastSeen > timeoutThreshold) {
      console.log(`‚è∞ –†–æ–±–æ—Ç ${robotId} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º...`);
      robot.connected = false;
      robot.player = null;
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥
      gameState.commandQueues[robotId] = [];
      
      io.emit('robotDisconnected', { robotId, reason: 'timeout' });
    }
  });
}, 30000);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`ü§ñ API –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ /api/robot/*`);
  console.log(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ /`);
});
